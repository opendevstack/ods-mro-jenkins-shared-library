plugins {
    id 'jacoco'
    id 'groovy'
    // id 'com.adarshr.test-logger' version "2.0.0"
}

group "org.ods"
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext
{
    nexus_url = project.findProperty('nexus_url') ?: System.getenv('NEXUS_HOST')
    nexus_user = project.findProperty('nexus_user') ?: System.getenv('NEXUS_USERNAME')
    nexus_pw = project.findProperty('nexus_pw') ?: System.getenv('NEXUS_PASSWORD')
    no_nexus = (project.findProperty('no_nexus') ?: System.getenv('NO_NEXUS') ?: false).toBoolean()
}

repositories {
    if (no_nexus) {
        println("using repositories 'jcenter' and 'mavenCentral'")
        jcenter()
        mavenCentral()

        maven {
            url "https://repo1.maven.org/maven2/"
            mavenContent {
                releasesOnly()
            }
        }

        maven {
            url "https://repo.jenkins-ci.org/releases"
            mavenContent {
                releasesOnly()
            }
        }
    } else {
        println("using nexus repositories")
        if (!nexus_url) {
            throw new GradleException('Nexus URL not specified!')
        }
        maven() {
            url "${nexus_url}/repository/jcenter/"
            credentials() {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }
        maven() {
            url "${nexus_url}/repository/maven-public/"
            credentials() {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }
        maven() {
            url "${nexus_url}/repository/atlassian_public/"
            credentials {
                username = "${nexus_user}"
                password = "${nexus_pw}"
            }
        }
    }
}

dependencies {
    implementation "com.cloudbees:groovy-cps:1.29"
    implementation "com.konghq:unirest-java:2.4.03:standalone"
    implementation "fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.core:2.0.2"
    implementation "fr.opensagres.xdocreport:fr.opensagres.poi.xwpf.converter.pdf:2.0.2"
    implementation "net.lingala.zip4j:zip4j:2.1.1"
    implementation "org.apache.ivy:ivy:2.2.0"
    implementation "org.apache.pdfbox:pdfbox:2.0.17"
    implementation "org.apache.poi:poi:4.0.1"
    implementation "org.codehaus.groovy:groovy-all:2.4.12"
    implementation "org.yaml:snakeyaml:1.24"
    implementation "org.jenkins-ci.main:jenkins-core:2.46.3"
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-api', version: '2.36', ext: 'jar'
    implementation group: 'org.jenkins-ci.plugins.workflow', name: 'workflow-cps', version: '2.41', ext: 'jar'
    implementation 'org.slf4j:jcl-over-slf4j:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.vladsch.flexmark:flexmark-all:0.60.2' // for markdown to pdf conversion (sonarqube reports)

    testImplementation "cglib:cglib-nodep:3.3.0"                      // for mocking classes
    testImplementation "com.github.stefanbirkner:system-rules:1.19.0" // for managing environment variables
    testImplementation "com.github.tomakehurst:wiremock:2.26.0"       // for mocking HTTP server reponses
    testImplementation "net.bytebuddy:byte-buddy:1.10.7"              // for mocking classes
    testImplementation "org.hamcrest:hamcrest:2.1"
    testImplementation "org.objenesis:objenesis:3.1"                  // for mocking final classes
    testImplementation "org.spockframework:spock-core:1.3-groovy-2.4"
}

sourceSets {
    main {
        groovy {
            srcDirs = ["src", "vars"]
        }
    }

    test {
        groovy {
            srcDirs = ['test/groovy']
        }
        resources {
            srcDir 'test/resources'
        }
    }
}

compileGroovy {
    groovyOptions.configurationScript = file("gradle/config.groovy")
}

/*testlogger {
    showStandardStreams true
}*/
